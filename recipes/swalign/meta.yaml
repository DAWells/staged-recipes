{% set name = "swalign" %}
{% set version = "0.3.7" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/swalign-{{ version }}.tar.gz
  sha256: de9607564996ae877fdabd7f305b1acfa8bc70556c4d40a40cf0915a4a560289

build:
  skip: true  # [py2k]
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  host:
    - python >=3.1
    - pip
  run:
    - python >=3.1

test:
  imports:
    - swalign
  commands:
    - pip check
  requires:
    - pip

about:
  home: http://github.com/mbreese/swalign/
  summary: Smith-Waterman local aligner
  description: |
    This package implements a Smith-Waterman style local alignment algorithm.
    You can align a query sequence to a reference. The scoring functions can be based on
    a matrix, or simple identity. Weights can be adjusted for match/mismatch and gaps,
    with gap extention penalties. Additionally, the gap penalty can be subject to a decay
    to prioritize long gaps.

    The input files are FASTA format sequences, or strings of sequences.

    Here is some skeleton code to get you started:

        import swalign
        # choose your own values hereâ€¦ 2 and -1 are common.
        match = 2
        mismatch = -1
        scoring = swalign.NucleotideScoringMatrix(match, mismatch)

        sw = swalign.LocalAlignment(scoring)  # you can also choose gap penalties, etc...
        alignment = sw.align('ACACACTA','AGCACACA')
        alignment.dump()

    For other uses, see the script in bin/swalign or https://compgen.io/projects/swalign
  license_file: LICENSE

extra:
  recipe-maintainers:
    - DAWells
